OPENCLINICA INSTALLATION GUIDE for RED HAT LINUX
OpenClinica Version 2.2.2
Document Version 1.0 
--------------------------------------------------------------
Updated: June 4 pgalvin@akazaresearch.com

This installation guide assumes that OpenClinica will be installed on a Linux-based server running Redhat ES 4 or compatible.

Please contact contact@akazaresearch.com for services to assist with on-site or remote installation, validation and QA testing of OpenClinica to assure complete deployment.


About OpenClinica
------------------------------------------------------
Professional Open Source Solutions for the Clinical Research Enterprise

OpenClinica is a software platform for protocol configuration, design of Case Report Forms (CRFs), and electronic data capture, retrieval, and management. It is extensible, modular, standards-based, and open source.

More about OpenClincia: http://www.OpenClinica.org


Installation Summary
--------------------------------------------------------------
OpenClinica runs and depends on several external applications: Sun's Java Development Kit, Apache Jakarta's Tomcat Servlet Container, and the Postgres Relational Database. (NOTE: Building the PostgreSQL server from source as described in this document, requires gcc and its dependent libraries to be installed).

<as user>Means to run the following commands using a normal unprivileged account (not root)
<as root>Means to run the following commands using the superuser account
<as tomcat>Means to run the following commands using the tomcat user
<as postgres>Means to run the following commands using the postgres user
NOTE: You probably will not know the tomcat or postgres passwords unless you explicitly set them. To login as one of these users without the password, you can login as root and then su - tomcat or su - postgres (note the dash between the su command and the user name, if you don't include that dash you will get a 'could not change directory to *username* error)

NOTE: The software stack OpenClinica runs on is open source, and most open source projects release minor versions and revisions often. Sometimes only a matter of weeks may separate the release of two adjacent versions of the software. For this release, the latest stable version of each component was used in integrated testing, and its revision number is referenced in this document. In some cases, the revision number mentioned may no longer be available. For the most part, you should be able to use later minor versions and revisions of the same software without incident. For instance, if the install guide uses PostgreSQL 8.1.6, PostgreSQL 8.1.4 should work as well. We recommend that you record the revision number you use. If you have concerns about a particular combination, please post your question to the users@openclinica.org mailing list.

NOTE: This installation guide is intended to get OpenClinica up and running as easily as possible on a Linux server. It does not go into details for development of OpenClinica from the source code. This information will be available soon, and will cover setting up Apache Ant and Eclipse.

*) Install Java 2 SDK 1.5 Update 14
*) Install Tomcat 5.5.25
*) Install PostgreSQL 8.2.5
*) Install OpenClinica 2.2.2
*) Configure OpenClinica 2.2.2

Install Java 2 SDK 1.5 Update 14
--------------------------------------------------------------
Installing Java might not be required since many systems already have a Java SDK installed. If you are unsure, or the system only has the Java run-time environment (JRE), please install this JDK. Your previous installation will still be available, and can be reset by changing the symbolic link at /usr/share/java.

If you want to download the SDK from the website please go to:
http://java.sun.com/javase/downloads/index.jsp, --> Previous Release Tab --> J2SE 5.0 Downloads --> JDK 5.0 Update --> Download -->Accept--> linux self-extracting-file
Download JDK 5.0 Update 14 and read the License. If you agree with the license, then continue. Under the Linux section click on the link labeled "self-extracting file" (not the RPM).

After you download it run the following commands <as user>:

sh jdk-1_5_0_14-linux-i586.bin;
<read license and press space until you get to bottom of screen, it will then extract>
<as root >
mv  jdk1.5.0_14 /usr/share/ 
cd /usr/share/
mv java java.old
ln -s jdk1.5.0_14 java
echo "export JAVA_HOME=/usr/share/java" >> /etc/profile;

More detailed installation instructions for the SDK can be found at http://java.sun.com/products/archive/j2se/5.0_14/index.html.

Install OpenClinica 2.2.2 Package
----------------------------------------------------
Create a user account and download OpenClinica from 
http://www.openclinica.org/section.php?sid=3

<as user>
tar -xzvf OpenClinica-2.2.2.tar.gz
<as root>
mv OpenClinica-2.2.2 /var/oc/

Install Apache Tomcat 5.5
--------------------------------------------------------------
Next, download the binary files of Tomcat and extract the file. Create a user called tomcat. As root, put it in a system directory and set the $CATALINA_HOME environment variable to point to the install directory. The specific steps for doing this are listed below:

<as root>
/usr/sbin/adduser tomcat
/usr/sbin/groupadd developers
gpasswd -a tomcat developers
<as tomcat>
cd /home/tomcat
wget http://apache.oregonstate.edu/tomcat/tomcat-5/v5.5.25/bin/apache-tomcat-5.5.25.tar.gz (or download the Core Binary from tomcat.apache.org)
tar -zxvf apache-tomcat-5.5.25.tar.gz
<as root>
mv /home/tomcat/apache-tomcat-5.5.25 /usr/share/
cd /usr/share
ln -s apache-tomcat-5.5.25 tomcat
echo "export CATALINA_HOME=/usr/share/tomcat" >> /etc/profile

To install Tomcat as a standalone service (one that stops and starts with the system) you must install a daemon. 

<as root>
cp /var/oc/OpenClinica-2.2.2/install-docs/linux/tomcatd /etc/init.d/
cd /etc/init.d
chmod 755 tomcatd
/sbin/chkconfig --del tomcatd
/sbin/chkconfig --add tomcatd
<exit and reboot your system>

You can manually stop and start tomcat with these scripts.
/usr/share/tomcat/bin/shutdown.sh
/usr/share/tomcat/bin/startup.sh

You can verify that tomcat is running by checking 
http://localhost:8080 

NOTE: If you are having difficulty getting the daemon to run at startup, assert that the line endings of the tomcatd file are the proper UNIX line terminators.

More detailed installation instructions for Apache Tomcat can be found at http://jakarta.apache.org/tomcat/tomcat-5.5-doc/setup.html.

Install PostgreSQL 8.2.5
--------------------------------------------------------------
This installion assumes that the development libraries are properly installed, including gcc and make.For more information about installation please check the file called INSTALL after extracting the tar file. 

NOTE: Many Linux distributions come with postgres already installed. For those systems you can probably skip this section and go to "Create the OpenClinica Database". You will need to modify those commands to fit your postgres installation.

Go to http://www.postgresql.org/ and download the latest 8.2 source version of postgres. You will be presented with mirrors. Select one in your country and it will download.

<as user>
tar -xzvf postgresql-8.2.5.tar.gz
cd postgresql-8.2.5
./configure
gmake
<as root>
gmake install
/usr/sbin/adduser postgres
gpasswd -a postgres developers
mkdir /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
echo "export PGDATA=/usr/local/pgsql/data" >> /etc/profile;

Now setup postgres to run as a daemon

<as root>
cp /var/oc/OpenClinica-2.2.2/install-docs/linux/postgresqld /etc/init.d/
cd /etc/init.d
chmod 755 postgresqld
/sbin/chkconfig --del postgresqld
/sbin/chkconfig --add postgresqld
<exit and reboot your system>
Check if postmaster is running, you should see several postgres processes
<as root>
ps -A | grep postmaster

NOTE: If you are having difficulty getting the daemon to run at startup, assert that the line endings of the postgresqld file are the proper UNIX line terminators.
More detailed installation instructions for Postgres can be found at http://www.postgresql.org/docs/8.2/interactive/index.html.

Create the Clinica Database Role
--------------------------------------------------------------
<as postgres>
/usr/local/pgsql/bin/psql -f /var/oc/OpenClinica-2.2.2/config/database/PostgreSQL/8.2/install/create_db_role.sql

NOTE: This step will fail if the clinica user has already been created. In this case you can skip this step.

Create the OpenClinica Database
--------------------------------------------------------------
<as postgres>
/usr/local/pgsql/bin/createdb openclinica
/usr/local/pgsql/bin/psql -d openclinica -f /var/oc/OpenClinica-2.2.2/config/database/PostgreSQL/8.2/install/create_database_2_2_with_data.sql

The output from the command will contain a series of SQL commands which are executed.

OpenClinica Library Files
--------------------------------------------------------------
To run OpenClinica 2.2.2 in Tomcat, the following libraries are required:
activation.jar
commons-beanutils.jar
commons-digester.jar
cos.jar
jstl.jar
mail.jar
ojdbc14.jar
poi-2.5-final-20040302.jar
postgresql-8.0-310.jdbc3.jar
postgresql-8.1-405.jdbc3.jar
standard.jar

From version 2.2.2, you don't have to copy these into $CATALINA_HOME/common/lib, because they are included inside the OpenClinica.war file itself. But on many linux systems we tested, you will still need to copy the JDBC driver(postgresql-8.1-405.jdbc3.jar) into $CATALINA_HOME/common/lib in order to connect to the database. This jar file can be found in the OpenClinica package (/var/oc//OpenClinica-2.2.2/lib).

<as tomcat>
cp /var/oc/OpenClinica-2.2.2/config/libraries/postgresql-8.1.405.jdbc3.jar /usr/share/tomcat/common/lib

Create Directory Structure
--------------------------------------------------------------
<as tomcat>
mkdir /usr/share/tomcat/openclinica.data/

NOTE: Make sure the tomcat user has read and write permissions on this directory. 

This path is required for saving uploaded CRFs and archived dataset files. 
Also, it is the home for the CRF spreadsheet template.  To offer the template through your system, create a folder "crf" under the path and copy the template into it.

<as tomcat>
mkdir /usr/share/tomcat/openclinica.data/crf
	
Once the application is deployed and operational, the system will create additional files and directories within this one. The final CRF and dataset file structure will be like the following:
	+---filePath
	+---crf                                 -  crf  blank template (CRF_Design_Template.xls )
	      +---new                           -  crf verion templates reorganized by system (.xls)
	      +---original                      - crf original templates uploaded from user's local machine (.xls)
	+---datasets
	    +---21                              - dataset files (.txt, .dat, .sps)
	    +---22                              - dataset files (.txt, .dat, .sps)
	    +---25                              - dataset files (.txt, .dat, .sps)
	    +---etc.                            - dataset files (.txt, .dat, .sps)

The folders 'new', 'original', and 'datasets' will be created by OpenClinica application if they don't exist on the server. 

NOTE: Make sure the tomcat user has write permissions on all of these directories.

OpenClinica Configuration Files
--------------------------------------------------------------
The next step is to copy the configuration files and the web application file (war) to the tomcat folders. Since tomcat is running, it will "hot-deploy" the application, creating the rest of the web application file structure.

<as tomcat>
cp /var/oc/OpenClinica-2.2.2/distribution/OpenClinica.war $CATALINA_HOME/webapps 
NOTE: If you do not see the expanded file structure after a minute ($CATALINA_HOME/webapps/OpenClinica), you can manually deploy the war file using the Tomcat Manager (http://localhost:8080/manager/html) 

There are three configuration files that need to be changed.

Edit $CATALINA_HOME/webapps/OpenClinica/properties/datainfo.properties and change the properties to suit your server environment as needed.  The initial datainfo.properties file looks something like this:

	#filePath=c:\\tomcat\\openclinica.data\\
	filePath=/usr/share/tomcat/openclinica.data/
	dataBase=postgres
	passwd_expiration_time=180
	auth_mode=password
	user_account_notification=email
	smtpHost=mail.example.com
	adminEmail=admin@example.com
	sysURL=http://localhost:8080/OpenClinica/MainMenu
	change_passwd_required=0


filePath: The path that files will be written to in the course of daily operations.  Note that this is a separate directory because the webapps/OpenClinica directory can be erased and rebuilt when you deploy a new version of the system.  This directory will hold sensitive information such as CRFs, datasets, etc. so it should be on a secured machine. This directory, and its structure, must be preserved during any backup/restore operations, along with the application database.

dataBase: Currently only 'postgres' is the correct answer; for this release it should not change.  Upcoming releases will have options for an 'oracle' version of OpenClinica, however.

passwd_expiration_time: Number of days before you are prompted to change your password.  Lower numbers (30, 60, 90) will encourage users to change their passwords more often.

auth_mode: Currently only 'password' will work; you will be able to add other authentication modes in the future, including 'ldap'.

user_account_notification:  Can be either 'email' or 'admin'.  If it is 'email' the system will send an email to new users, notifying them that an account has been created for them.  If it is 'admin', then the system will not send an email and the administrator will have to contact the user personally to let them know that they have an account.

smtpHost: The current email SMTP host that you will use to relay outgoing emails to the users of the system.  Usually it is on another machine and will not be 'localhost'. 
NOTE: You must configure the smtp host correctly, or the system will hang when trying to send email notifications. If you don't want to use outgoing mail features, a workaround would be to set this value to a mail server with a short timeout. This has been noted a a Known Issue and will be resolved in a future release.

adminEmail: The reply email address used in the emails to users of the system.

sysURL:  The web address for the system.  It can either be an external address (demo.openclinica.org) or an internal IP address (192.168.2.000).
NOTE: If you reconfigure the address or port in some later step, such as by configuring SSL, you will need to come back and update this file. You will also need to restart tomcat for changes to this take effect.

change_passwd_required: Indiates whether users are forced to change their pa                                     ssword when it expires. (NOTE: the first time a user logs into the system, the password is considered expired.)

Edit $CATALINA_HOME/webapps/OpenClinica/properties/facilityinfo.properties and change the settings there for your facility's name, address, state, etc that will be treated as the 'default' location and contact information for users and subjects.

	# -----Facility information--------
	FacName=Default GCRC
	FacCity=Boston
	FacState=MA
	FacZIP=02142
	FacCountry=USA
	FacContactName=John Smith
	FacContactDegree=PhD, MD
	FacContactPhone=617-123-1234
	FacContactEmail=aaa@aaa.org
	# -----User Role information--------
	ra=Data Entry Person
	investigator=Investigator
	director=Study Director
	coordinator=Study Coordinator

Many of the fields above are self-explanatory; the user role names are to switch out the names we have in our system for names that are convention in your own study, i.e. Research Assistant instead of Data Entry Person.

Edit $CATALINA_HOME/conf/Catalina/localhost/OpenClinica.xml to fit your enviroment.	A description of why this file is important and what it does can be found at http://jakarta.apache.org/tomcat/tomcat-5.5-doc/deployer-howto.html.  This file will contain the following XML:

	<!--
	    Context configuration file for the Tomcat Administration Web App
	    $Id: INSTALL-Linux.txt,v 1.3 2007/03/13 20:22:36 jsampson Exp $
	-->
	
	<Context path="/OpenClinica" docBase="OpenClinica" debug="99" reloadable="true" 
	    crossContext="true" useNaming="true">
	    <!--Linux users will need to change the propertiesDir value, usually /usr/share/tomcat/webapps/OpenClinica/properties/ -->
	    <Parameter name="propertiesDir" value="C:\\tomcat5\\webapps\\OpenClinica\\properties\\"  override="false"/> 
	
	<Realm className="org.apache.catalina.realm.JDBCRealm" debug="99" 
	    driverName="org.postgresql.Driver" digest="MD5" 
	connectionURL="jdbc:postgresql://localhost:5432/openclinica"
	connectionName="clinica" connectionPassword="clinica" userTable="user_account" 
	userNameCol="user_name" userCredCol="passwd" 
	userRoleTable="study_user_role" roleNameCol="role_name"/>
	
	<Logger className="org.apache.catalina.logger.FileLogger" prefix="openclinica_log_1.0." 
	     suffix=".txt" timestamp="true"/> 
	
	<Resource name="SQLPostgres" auth="Container" 
	  type="javax.sql.DataSource" factory="org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory"
	  username="clinica"
	        password="clinica"
	  driverClassName="org.postgresql.Driver"
	        url="jdbc:postgresql://localhost:5432/openclinica"  
	      maxActive="100" 
	   maxIdle="30" 
	   maxWait="10000"/>
	
	</Context>
	
The propertiesDir file is using a Windows path, this will need to be updated, in this case you should change it to:
	    <Parameter name="propertiesDir" value="/usr/share/tomcat/webapps/OpenClinica/properties/" override="false"/> 

The things that will have to be changed to fit your environment are the security realm (indicated by the Realm tags) and the database resource (indicated by the Resource tags). Change the following items:
Realm properties:
	connectionURL = the address of your postgres database.
	connectionName = the username that will log in to the database.  Note that this is unique to the database system only, and is not a user on the Linux system.
	connectionPassword = the password that the database user 'clinica' will use to log in to the database.  NOTE that this should be something OTHER THAN 'clinica'.
SQLPostgres Resource properties
	username = same as connectionName
	password = same as connectionPassword
	url = same as connectionURL

NOTE: You will need to restart tomcat for these changes to take effect.
NOTE: RESTARTING TOMCAT IS VERY IMPORTANT (to restart tomcat, try the following commands:
<as root>
/etc/init.d/tomcatd restart

NOTE: /etc/init.d/tomcatd performs an su to tomcat to run the following commands:

/usr/share/tomcat/bin/shutdown.sh
/usr/share/tomcat/bin/startup.sh

These commands should never be run directly by root, only by tomcat.

At this point it is a good idea to check the web application to see if it deployed properly, and can make a database connection. Open a web browser on the system and go to http://<hostname>:8080/OpenClinica, you should see the OpenClinica login page. Login with the username "root" and the password "12345678". If you are unable to login, you either could not make a connection to the database, or the database is missing information. The Tomcat logs in /usr/share/tomcat/logs are a good source for additional information.

Configure HTTPS
--------------------------------------------------------------
Akaza Research strongly recommends securing the Tomcat application server using SSL. SSL is the technology used to make secured 'https://' connections. SSL requires a third-party security certificate to be effective. For more information, please contact@akazaresearch.com regarding our Enterprise services.

Setting Up The Data Warehouse
--------------------------------------------------------------
In order to run queries on data, a datamart must be used. A cronjob should be setup.to compile the datamart at regular intervals. The script that compiles the datamart is contained in /var/oc/OpenClinica-2.2.2/conf/pg_data_warehouse.sql.

You will have to add a line to the crontab for the user postgres (NOTE: crontab defaults to using vi as an editor, if you are more comfortable with emacs or some other text editor, try calling export EDITOR=emacs before running crontab)

<as postgres>
crontab -e

add the following row to the table
0 0 * * * /usr/local/pgsql/bin/psql -U clinica -d openclinica -f /var/oc/OpenClinica-2.2.2/configruation/datawarehouse/pg_data_warehouse.sql

This will setup a cron job that will update the data warehouse daily at midnight.

Verify System Environment
--------------------------------------------------------------
The following set of tasks must be conducted to ensure the system is setup correctly.

1. First make sure Tomcat is running and properly configured in Linux:
	Open a web browser on the system and go to http://<hostname>:8080/, you should see the Tomcat home page.
	<as tomcat>
	env | grep CATALINA_HOME
	<this should return /usr/share/tomcat>

2. Make sure Postgres is running:
	<as postgres>
	ps aux | grep postmaster
	<this should show one or more postmaster processes>

3. Verify Tomcat deployed the web application.
	Check $CATALINA_HOME/webapps for an OpenClinica directory.
	
4. Test in browser.
	On the server, if browser is installed, go to http://<hostname>:8080/OpenClinica
	Next, go to https://<hostname>/OpenClinica from a browser on a different machine.

5. Login.
	Login with the username "root" and the password "12345678". Please change this password as soon as you log in. The root user will be assigned a default project called "default". Create a technical admininstrator login for youself and secure the password for the default root user. Create user accounts, you will want to create at least one Study Coordinator.

	Refer users to the OpenClinica Quick Start for insructions on using the application.

Validation and Testing
--------------------------------------------------------------
Please contact contact@akazaresearch.com for services to assist with on-site or remote installation, validation and quality assurance services for OpenClinica.

Developer and Contact Information
--------------------------------------------------------------
Akaza Research, based in Cambridge, MA, provides open informatics solutions that address the needs of institutions engaged in clinical, healthcare and biomedical research. 

Akaza utilizes internally- and community-developed open source software and open standards to provide professional services for the clinical research enterprise. These open solutions enable Akaza's academic customers to effectively address the challenges of data management, compliance, and interoperability in the modern clinical and healthcare research environment.

Akaza Research
One Kendall Square
Bldg. 400, 4th Floor
Cambridge, MA 02139
phone: 617.621.8585
fax: 617.621.0065
email: contact@akazaresearch.com

For more about Akaza's products and initiatives see: 
http://www.OpenClinica.org
http://www.akazaresearch.com
